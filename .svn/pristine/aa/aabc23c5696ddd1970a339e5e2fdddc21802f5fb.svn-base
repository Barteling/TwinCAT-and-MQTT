<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="MAIN" Id="{0d666fc9-df30-40f9-b555-d1129e0440e1}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	fbMqttClient: FB_IotMqttClient; // MQTT client.       
    TopicToPublish   : STRING(255) := 'Temperatures'; // Mqtt topic on which we will broadcast the acual temperatures
    MessageToPublish : STRING(255); //String to send.
    fbSendMessageIntervalTimer : TON := (PT:=T#1S);	//Interval timer for broadcasting.
	ai_RoomTemperature AT %I* : INT; //Actual room temperature, linked to thermocouple	 
	
	TopicToPublishJson   : STRING(255) := 'Temperatures_JSON'; // Mqtt topic on which we will broadcast the acual temperatures in JSON format
	MessageToPublishJson : STRING(255); //String to send in JSON format
	fbJsonWriter : FB_JsonSaxWriter;
	fbJsonDataType : FB_JsonReadWriteDataType;
	TemperatureStructure:TemperatureStructure; 	
	  
END_VAR

    ]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF _TaskInfo[GETCURTASKINDEXEX()].FirstCycle THEN    
    fbMqttClient.sHostName      := '192.168.178.19';
    fbMqttClient.nHostPort      := 1883;
    fbMqttClient.sTopicPrefix   := '';     
	fbMqttClient.sClientId 		:= 'Publishing PLC';
END_IF

fbMqttClient.Execute(TRUE);

IF fbMqttClient.bConnected THEN
    fbSendMessageIntervalTimer(IN:=TRUE);
    IF fbSendMessageIntervalTimer.Q THEN
        fbSendMessageIntervalTimer(IN:=FALSE);        
        MessageToPublish := CONCAT('Room temperature: ',REAL_TO_STRING(ai_RoomTemperature / 10.0));
		
        fbMqttClient.Publish(sTopic:= TopicToPublish, 
        	pPayload:= ADR(MessageToPublish), 
			nPayloadSize:= LEN2(ADR(MessageToPublish))+1, 
            eQoS:= TcIotMqttQos.AtMostOnceDelivery, 
			bRetain:= FALSE,
			bQueue:= FALSE);
			
			// Fill data
			TemperatureStructure.RoomTemperature := ai_RoomTemperature / 10.0;
			TemperatureStructure.BathRoomTemperature :=TemperatureStructure.RoomTemperature + 0.5; // No second temperature available, so this simulation value will do.
			TemperatureStructure.SomeOtherData := 33;// Random data.
			
			// COnvert to JSON string
			fbJsonWriter.ResetDocument();
			fbJsonDataType.AddJsonValueFromSymbol(fbJsonWriter, 'TemperatureStructure', SIZEOF(TemperatureStructure), ADR(TemperatureStructure));
			MessageToPublishJson := fbJsonWriter.GetDocument();
			
			//Publish
			fbMqttClient.Publish(sTopic:= TopicToPublishJson, 
        	pPayload:= ADR(MessageToPublishJson), 
			nPayloadSize:= LEN2(ADR(MessageToPublishJson))+1, 
            eQoS:= TcIotMqttQos.AtMostOnceDelivery, 
			bRetain:= FALSE,
			bQueue:= FALSE);
    END_IF
END_IF
 ]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="295" Count="0" />
      <LineId Id="297" Count="2" />
      <LineId Id="343" Count="0" />
      <LineId Id="300" Count="7" />
      <LineId Id="329" Count="0" />
      <LineId Id="319" Count="0" />
      <LineId Id="309" Count="1" />
      <LineId Id="316" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="317" Count="0" />
      <LineId Id="332" Count="0" />
      <LineId Id="363" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="378" Count="2" />
      <LineId Id="382" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="376" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="377" Count="0" />
      <LineId Id="383" Count="0" />
      <LineId Id="357" Count="4" />
      <LineId Id="356" Count="0" />
      <LineId Id="312" Count="1" />
      <LineId Id="66" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>